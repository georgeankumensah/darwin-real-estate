generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  firstName      String
  lastName       String
  phoneNumber    String
  altPhoneNumber String?
  location       String?
  type           UserType
  profileImage   String?
  password       String?
  status         UserStatus @default(ACTIVE)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deletedAt      DateTime?

  ownedProperties Property[] @relation("OwnerRelation")
}

model Property {
  id           String         @id @default(cuid())
  title        String
  description  String?
  propertyType String
  currency     String
  price        Float
  bedrooms     Int
  bathrooms    Int
  area         Int?
  yearBuilt    Int?
  address      String
  features     String[]
  status       PropertyStatus @default(FOR_SALE)
  ownerId      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  owner        User?         @relation("OwnerRelation", fields: [ownerId], references: [id])
  tenants      Customer[]
  transactions Transaction[]
  media        Media[]       @relation("PropertyMedia")

  @@index([status])
  @@index([ownerId])
}

model Media {
  id         String   @id @default(cuid())
  url        String
  publicId   String
  type       String // 'image' or 'video'
  propertyId String
  property   Property @relation("PropertyMedia", fields: [propertyId], references: [id])
  createdAt  DateTime @default(now())
}

model Customer {
  id          String             @id @default(cuid())
  firstName   String
  lastName    String
  phoneNumber String
  email       String?
  roomNumber  String?
  floorNumber String?
  startDate   DateTime
  endDate     DateTime?
  status      PropertyUserStatus
  propertyId  String
  property    Property           @relation(fields: [propertyId], references: [id])
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?
}

model Transaction {
  id              String            @id @default(cuid())
  transactionType TransactionType
  currency        String
  amount          Float
  transactionDate DateTime
  status          TransactionStatus
  refNumber       String            @unique
  description     String?
  propertyId      String
  property        Property          @relation(fields: [propertyId], references: [id])
  paymentMethod   PaymentMethod
  fees            Float?
  contract        String?
  receipt         String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Snapshot fields to preserve history
  customerFirstName   String
  customerLastName    String
  customerPhoneNumber String
  customerEmail       String?
  customerStartDate   DateTime?
  customerEndDate     DateTime?
  roomNumber          String?
  floorNumber         String?

  propertyTitle   String
  propertyAddress String
}

enum PropertyStatus {
  FOR_SALE
  FOR_RENT
  SOLD
  RENTED
}

enum UserType {
  OWNER
  ADMIN
}

enum PropertyUserStatus {
  PENDING
  ACTIVE
  TERMINATED
  REJECTED
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  DELETED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  RENT
  SALE
  DEPOSIT
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  MOBILE_MONEY
  OTHER
}
